//deadlockpossible.xc
#include <platform.h>
#include <stdio.h>

//define a communication interface i
typedef interface i {
  void f(int x);
  void g();
} i;

//server task providing functionality of i
void myServer(server i myInterface,
              server i myInterface2) {
  int serving = 1;
  while (serving)
    select {
      case myInterface2.f(int x):
        printf("f got data in IF2: %d \n", x);
        break;
      case myInterface2.g():
        printf("g was called in IF2\n");
        break;
      case myInterface.f(int x):
        printf("f got data in IF1: %d \n", x);
        break;
      case myInterface.g():
        printf("g was called in IF1\n");
        serving = 0;
        break;
  }
}

//client task calling functions
void myClient(client i myInterface) {
  myInterface.f(2);
  myInterface.f(1);
  myInterface.g();
}

//main starting three threads calling //over two interfaces
int main() {
  interface i myInterface;
  interface i myInterface2;
  par {
    on tile[0]: myServer(myInterface,
                         myInterface2);
    on tile[1]: myClient(myInterface2);
    on tile[1]: myClient(myInterface);
  }
  return 0;
}
